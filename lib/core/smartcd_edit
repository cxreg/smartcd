function smartcd_edit() {
    # Invoke the users editor (or vi) on the relevant file
    local file="$1"
    local dir="${2:-$(pwd)}"

    case $file in
        bash_enter|bash_leave) local type=${file#bash_};;
                  enter|leave) local type=$file; file="bash_$file";;
                            *) echo "Usage: smartcd_edit ( enter | leave )"
                               return
                               ;;
    esac

    local base=$(_smartcd_base)

    if [[ -f "$base$dir/$file" ]]; then
        smartcd_upgrade_database
    fi

    local smartcd_dir="$base/scripts$dir"
    if [[ ! -d "$smartcd_dir" ]]; then
        command mkdir -p "$smartcd_dir"
    fi

    # Temporarily disable noclobber for zsh users
    [[ -n $ZSH_VERSION ]] && setopt localoptions && setopt clobber

    # Edit the file if interactive, otherwise write standard input to it
    if [[ -z $append && -t 0 ]]; then
        local tmpfile=$(mktemp /tmp/smartcd-edit.XXXXXX) line=
        local _old_ifs="$IFS"
        IFS=$'\n'
        if [[ -f "$smartcd_dir/$file" ]]; then
            while builtin read -r line; do
                case $line in
                    # extremely hinky replacement here, very whitespace sensitive
                    *"smartcd template run"*) local tmpl=${line##*template run }
                                            tmpl=${tmpl%% *}
                                            echo "$line" >> "$tmpfile"
                                            echo "$(smartcd template show_part $tmpl ${file#bash_})" >> "$tmpfile"
                                            ;;
                                        *) echo "$line" >> "$tmpfile";;
                esac
            done < "$smartcd_dir/$file"
        else
            if [[ $type == "enter" ]]; then
                local enter_usage="$(cat <<EOF
  Some examples are editing your \$PATH or creating
# a temporary alias:
#
#     autostash PATH=__PATH__/bin:\$PATH
#     autostash alias restart="service stop; sleep 1; service start"
EOF
)"
            fi
            command cat >> "$tmpfile" << EOF
########################################################################
# smartcd $type - $dir
#
# This is a smartcd script.  Commands you type will be run when you
# $type this directory.  The string __PATH__ will be replaced with
# the current path.$enter_usage
#
# See http://smartcd.org for more ideas about what can be put here
########################################################################
EOF
        fi
        ${EDITOR:-vi} "$tmpfile"
        if [[ $? == 0 ]]; then
            echo -n > "$smartcd_dir/$file"
            if [[ -s "$tmpfile" ]]; then
                local writing=1
                while builtin read -r line; do
                    case $line in
                        "# begin smartcd template"*) writing=;;
                        "# end smartcd template"*) writing=1;;
                                                *) if [[ -n $writing ]]; then echo "$line" >> "$smartcd_dir/$file"; fi;;
                    esac
                done < "$tmpfile"
            fi
        fi
        IFS="$_old_ifs"
        command rm "$tmpfile"
    elif [[ -n $append ]]; then
        command cat >> "$smartcd_dir/$file"
    else
        command cat > "$smartcd_dir/$file"
    fi

    if [[ -f "$smartcd_dir/$file" && ! -s "$smartcd_dir/$file" ]]; then
        # Delete any file that is left empty
        command rm "$smartcd_dir/$file"
    fi
}

function smartcd_append() {
    local append=1
    smartcd_edit "$@"
}

# _smartcd_file_check <file> <action> [<directory>]
function _smartcd_file_check() {
    local file="$1"
    local action="$2"
    local dir="$3"

    if [[ -n $dir ]]; then
        # canonicalize
        dir=$(builtin cd $dir 2>/dev/null && command pwd)
        if [[ -z $dir ]]; then
            echo "$3 is not a valid directory"
            return
        fi
    else
        dir="$(pwd)"
    fi

    local base=$(_smartcd_base)
    local confdir="$base/scripts$dir"

    if [[ -f "$base$dir/$file" ]]; then
        smartcd_upgrade_database
    fi

    case $action in
           -h|help) echo "Usage: $file [ edit | show | filename ]";;
       -f|filename) echo "$confdir/$file";;
           -e|edit) smartcd_edit $file "$dir";;
         -a|append) smartcd_append $file "$dir";;
    -l|show|cat|'') if [[ -f "$confdir/$file" ]]; then
                        echo "$confdir/$file exists"
                        case $action in
                           -l|show|cat) echo "-------------------------------------------------------------------------"
                                        command cat "$confdir/$file"
                                        echo "-------------------------------------------------------------------------"
                                        ;;
                        esac
                    else
                        echo "$confdir/$file does not exist"
                    fi
                    ;;
    esac
}
