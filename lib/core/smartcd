################################################################################
# smartcd - cd with some oomph
#
#   Copyright (c) 2009,2012 Dave Olszewski <cxreg@pobox.com>
#   http://github.com/cxreg/smartcd
#
#   This code is released under GPL v2 and the Artistic License, and
#   may be redistributed under the terms of either.
#
#
#   ###########
#   # Summary #
#   ###########
#
#   This replacement for bash's built-in cd function gives you the
#   ability to run bash_enter and bash_leave scripts for each of
#   the directories you are traveling between.  The scripts are run
#   in the expected order to the most common root between where you
#   are, and where you're going.  These files reside in a hierarchy
#   under your home directory which mirrors the directories they
#   represent, for example:
#
#       /foo/bar/baz  ->  ~/.smartcd/scripts/foo/bar/baz
#
#   ###############
#   # Basic usage #
#   ###############
#
#       # Install the library
#       make install
#
#       # Add it to your bash init script
#       smartcd setup cd # replaces cd with cd()
#
#       # And it works with pushd/popd too
#       smartcd setup pushd
#       smartcd setup popd
#
#       If you are an "autocd" user, you may want
#       smartcd setup prompt-hook
#
#       # Edit the file to create some commands to run when entering
#       smartcd edit enter
#
#       # Non-interactively
#       echo 'echo "hi!"' | smartcd edit enter
#
#       # Or done manually
#       echo 'echo "hi!"' > ~/.smartcd/scripts/somedir/bash_enter
#
#       # When a shell is started enter scripts will be run from / up to your
#       # current directory.  If you want the inverse to occur as well, having
#       # leave scripts run on shell exit, you'll want to hook the shell's EXIT
#       # trap like this:
#       smartcd setup exit-hook
#
#   This library combines very nicely with varstash to allow
#   you to set per-directory environment variables:
#
#       # bash_enter
#       stash PATH
#       export PATH=/something/extra:$PATH
#
#       # bash_leave
#       unstash PATH
#
#       # or the automagic version, which unstashes for you
#       autostash PATH
#       export PATH=/something/extra:$PATH
#
#   When a script is run by smartcd, it will announce that it has done
#   so unless SMARTCD_QUIET is set.
#
#   ###########
#   # Helpers #
#   ###########
#
#   Some pre-written scripts are provided which implement things that
#   you may find useful.  This system also allows people to distribute
#   and share these independently of the core smartcd distribution.
#
#   Currently the included helpers are 'path', 'history', 'perlbrew',
#   and 'perl-locallib'
#
#       smartcd helper run history localize __PATH__/.history
#
#       smartcd helper run path append __PATH__/bin
#
#       smartcd helper run perlbrew init /path/to/perlbrew/install
#
#       smartcd helper run perl-locallib activate __PATH__/perl5lib
#
#   #############
#   # Templates #
#   #############
#
#   One advanced feature of smartcd is the ability to configure and use
#   templates for your enter and leave scripts.  If you often find yourself
#   creating very similar scripts with only minor differences, templates can
#   help.  This is handled with "smartcd template".
#
#   To create a template based on the current directory, run:
#
#       smartcd template create template_name
#
#   The name can be any arbitrary value, but should be meaningful to you and
#   should not contain special characters.  This will create a new template
#   named what you have chosen, and prepopulate it with the contents from
#   your current bash_enter and bash_leave scripts.  You can then edit the
#   file and save it.  When you install the template, anywhere you inserted
#   the string "__PATH__" will be replaced with the directory being set up.
#
#   To install the template, cd to a destination and run:
#
#       smartcd template install template_name
#
#   The other available commands are:
#
#       smartcd template list
#       smartcd template show <name>
#       smartcd template edit <name>
#       smartcd template delete <name>
#
#   ##############
#   # Backing up #
#   ##############
#
#   You may find it valuable to back up your scripts and templates, either
#   for preventative measures, or to copy your scripts to another machine.
#   In any case, a import and export feature is provided to allow you to
#   archive these files and restore them to a ~/.smartcd folder.
#
#       # Export your scripts
#       smartcd export > my_smartcd_backup
#
#       # Several methods to import them
#       smartcd import my_smartcd_backup
#       cat my_smartcd_backup | smartcd import
#
#   If it happens that the machine you are importing to already has a ~/.smartcd
#   directory with any scripts or templates in it, these files will be moved
#   to a temp folder to avoid any conflict.  You may want to inspect these files
#   by hand if this occurs and put them back in place if necessary.
#
#   ########################
#   # Legacy mode (unsafe) #
#   ########################
#
#   The original version of this library was such that the scripts
#   containing the commands to run were themselves located in the
#   directory which they correspond to, named .bash_enter and
#   .bash_leave:
#
#       /foo/bar/baz  ->  /foo/bar/baz/.bash_enter
#
#   This was deemed unsafe, and the new scheme was adopted.  If you
#   prefer the old system and wish to accept the risk in doing so, you
#   can set SMARTCD_LEGACY=1 to allow the old behavior.  If you do not do
#   so, and a legacy script is found, it will *NOT* be invoked, and
#   instructions for migrating it to the new location will be displayed
#   (unless SMARTCD_QUIET is set).  If you set SMARTCD_AUTOMIGRATE=1 then
#   the migration steps will be executed for you whenever a legacy script
#   is found.
#
################################################################################

# Compatibility functions
function smartpushd() { smartcd pushd "$@"; }
function smartpopd()  { smartcd popd "$@";  }

function smartcd() {
    if [[ ! -t 1 ]] && (( ${SMARTCD_QUIET:-1} > 0 )); then
        SMARTCD_QUIET=1
        local suppress_output=1
    fi

    local command="$1"

    if [[ $# == "2" && $* == "cd ." ]]; then
        command="reenter"
    fi

    local usage="Usage: smartcd ( edit | show | filename | helper | template | setup | config | export | import ) [args]"
    case $command in
        -h|help|'') echo $usage;;
     cd|pushd|popd) shift; _smartcd $command "$@"; return $?;;
           reenter) local dir="$(pwd)"
                    _smartcd cd ..
                    _smartcd cd "$dir"
                    ;;
     edit|show|cat|\
   append|filename) shift; local file=$1; shift
                    case $file in
                                   enter|leave) _smartcd_file_check bash_$file $command  "$@";;
                         bash_enter|bash_leave) _smartcd_file_check $file $command  "$@";;
                                             *) echo "Usage: smartcd $command ( enter | leave )";;
                    esac
                    ;;
          template) shift; smartcd_template "$@";;
             setup) shift; local setup=$1; shift;
                    case $setup in
                             cd|pushd|popd) setup_smartcd_function $setup;;
                        prompt-hook|prompt) setup_smartcd_prompt_hook;;
                          chpwd-hook|chpwd) setup_smartcd_chpwd_hook;;
                            exit-hook|exit) setup_smartcd_exit_hook;;
                                completion) _smartcd_load "completion";;
                    esac
                    ;;
          on-leave) local code=${2//\\/\\\\};
                    code=${code//\"/\\\"}
                    __smartcd_func_ctr=$(( $__smartcd_func_ctr + 1 ))
                    local fn="__generated_smartcd_function_$__smartcd_func_ctr"
                    eval "function $fn() { eval \"$code\"; unset -f $fn; }"
                    local hook_array=$(_mangle_var smartcd_onleave_callbacks)
                    apush $hook_array $fn
                    ;;
        on-descend) shift
                    case "$1" in
                        # Recursive means that we use on-descend to hook itself.  Clever huh?
                        -r) shift
                            local param="${1//\\/\\\\}"
                            param=${param//\"/\\\"}
                            apush smartcd_ondescend_callbacks "smartcd on-descend -r \"$param\""
                            ;;
                    esac
                    apush smartcd_ondescend_callbacks "$1"
                    ;;
         on-prompt) shift;
                    # The prompt hook is required for this feature
                    if [[ -z $_smartcd_original_prompt_command ]]; then
                        setup_smartcd_prompt_hook
                    fi
                    local run_from_smartcd=1
                    autostash smartcd_onprompt_callbacks
                    apush smartcd_onprompt_callbacks "$1"
                    ;;
            config) smartcd_config;;
            export) shift; smartcd_export "$@";;
            import) shift; smartcd_import "$@";;
            inform) shift; if [[ -z $suppress_output ]]; then echo "$@"; fi;;
            helper) shift; smartcd_helper "$@";;
                 *) if [[ -n $ZSH_VERSION ]]; then
                        local dir=$argv[-1]
                    else
                        local dir=${!#}
                    fi
                    if [[ -d $dir ]]; then
                        if [[ -z $smartcd_warned_alias ]]; then
                            echo "You appear to have smartcd set up in a deprecated fashion.  Please update your"
                            echo "configuration.  If it currently looks like this:"
                            echo
                            echo "   alias cd=smartcd"
                            echo "   alias pushd=smartpushd"
                            echo "   alias popd=smartpopd"
                            echo
                            echo "you should update it to instead say this:"
                            echo
                            echo "   smartcd setup cd"
                            echo "   smartcd setup pushd"
                            echo "   smartcd setup popd"
                            echo
                            echo "If you are getting this message incorrectly or don't know what it means, run"
                            echo "\`smartcd config\`, or email cxreg@pobox.com for help."
                            smartcd_warned_alias=1
                        fi
                        _smartcd cd "$@"
                    else
                        echo $usage
                    fi
                    ;;
    esac
}

function _smartcd_base() {
    if [[ -n $SMARTCD_BASE ]]; then
        echo "$SMARTCD_BASE"
    else
        echo "$HOME/.smartcd"
    fi

}

# Load bits of functionality from files
function _smartcd_load() {
    local file="$1"
    local smartcd_file="$(_smartcd_file)"
    eval "source ${smartcd_file/%smartcd/$file}"
}

function _smartcd_exec_file() {
    local file="$1"; shift
    local contents="$(command cat "$file")"
    _smartcd_exec "$contents" "$@"
}

function _smartcd_exec() {
    local contents="${1//__PATH__/$2}"
    shift; shift
    eval "set -- \"\$@\"; $contents"
}

function _smartcd_check_inode() {
    if [[ -n $SMARTCD_NO_INODE ]]; then
        return
    fi
    local dir=$1;
    if [[ ! -d "$dir" ]]; then
        # Don't barf when leaving deleted directory
        return
    fi
    local base=$(_smartcd_base)
    local inode=$(command ls -di "$dir" | command awk '{print $1}')
    if [[ -f "$base/inodes$dir.inode" ]]; then
        prev=$(command cat "$base/inodes$dir.inode")
        if [[ $prev != "*" && $inode != $prev ]]; then
            echo "WARNING!  Possibly outdated scripts detected, not running them.  These"
            echo "scripts were created for a directory which has been deleted or replaced,"
            echo "but the scripts for them remained.  Please check the following files"
            echo "for correctness:"
            echo
            local _old_ifs="$IFS"
            IFS=$'\n'
            for file in $(command ls "$base/scripts$dir"); do
                if [[ -f "$base/scripts$dir/$file" ]]; then
                    echo "    $base/scripts$dir/$file"
                fi
            IFS="$_old_ifs"
            done
            echo
            echo "Once you have verified or corrected the situation, remove the following"
            echo "file to make this warning go away"
            echo
            echo "    $base/inodes$dir.inode"
            echo
            echo "If you don't wish to keep this safety check in place, set SMARTCD_NO_INODE=1"
            echo "or re-run \`smartcd config\`"
            echo
            echo "To permanently ignore this check only for $dir, run the following command"
            echo
            echo "    echo '*' > \"$base/inodes$dir.inode\""
            _inode_skip=1
        fi
    else
        command mkdir -p "$base/inodes$dir"
        echo $inode > "$base/inodes$dir.inode"
    fi
}

function _smartcd_sysdir() {
    if [[ -n $SMARTCD_SYSTEM_SCRIPTS ]]; then
        local sysdir=$SMARTCD_SYSTEM_SCRIPTS
    else
        local sysdir=$(_smartcd_file)
        case $sysdir in
            ~*|$HOME/*) sysdir="/etc/smartcd/scripts";;
                     *) sysdir=${sysdir/%lib\/core\/smartcd/etc\/scripts};;
        esac
    fi

    echo "$sysdir"
}

function _smartcd() {
    # Don't run this twice consecutively from being sourced.  If the user double-sources
    # then it could result in scripts being run twice which may have undesirable or
    # unpredictable effects, so don't do that
    if [[ -n $smartcd_run_mainline ]]; then
        if [[ -n $smartcd_last_run_mainline ]]; then
            unset smartcd_run_mainline
            return
        else
            smartcd_last_run_mainline=1
        fi
    else
        unset smartcd_last_run_mainline
    fi
    unset smartcd_run_mainline

    local base=$(_smartcd_base)

    # What are we being invoked as?
    local action="builtin $1"; shift

    # First, take note of where we're starting from
    local wherenow="${_smartcd_last_run_for#x}"
    local wherestarted="$wherenow"
    if [[ -z "$wherestarted" ]]; then
        wherestarted=/
        local initial_mode=1
    fi
    local run_from_smartcd=1
    local _ashift_return
    local _apop_return

    if [[ -z "$(fn_exists apush)" ]]; then
        echo "array library is not loaded, please ensure that it is installed before using smartcd"
        return
    fi

    # If this is zsh and the user has chpwd enabled, it will fire a whole lot of times
    # during this.  Stash it and disable it until we're done.
    if [[ -n $ZSH_VERSION && -n "$(fn_exists stash)" ]]; then
        local varstash_dir="$wherestarted"
        stash -f chpwd
        stash -f chpwd_functions
        unset -f chpwd 2>/dev/null
        unset chpwd_functions 2>/dev/null
        unset -v varstash_dir
        local stashed_chpwd=1
    fi

    # Go there and get the fully qualified path.  Also, fail first if it's an
    # invalid destination, before we do any more work.
    local _old_ifs="$IFS"
    IFS=$' \t\n'
    if [[ -z $smartcd_skip_action ]]; then
        if [[ -n $1 ]] || [[ -z ${1-_} ]]; then
            if [[ -n $ZSH_VERSION ]]; then
                ${=action} "$@"
            else
                $action "$@"
            fi
        else
            eval $action
        fi
    fi
    local rv=$?
    IFS="$_old_ifs"

    if (( $rv != 0 )); then return $rv; fi
    local whereto="$(pwd)"
    _smartcd_last_run_for="x$whereto"

    # If zsh, turn autopushd off temporarily to avoid extra pushes
    if [[ -n $ZSH_VERSION ]]; then
        setopt localoptions
        setopt noautopushd
        setopt nopushdignoredups
    fi

    # Collect the list of directories we're leaving
    unset leave_stack
    while [[ -n $wherenow ]]; do
        apush leave_stack "$wherenow"
        wherenow="${wherenow%/*}"
    done
    if [[ -z $initial_mode ]]; then
        apush leave_stack "/"
    fi

    # Collect the list of directories we're entering, but enter nothing if
    # we're in "exit mode" which just runs all leave scripts
    if [[ -z $smartcd_exiting ]]; then
        wherenow="$whereto"
        unset enter_stack
        while [[ -n $wherenow ]]; do
            apush enter_stack "$wherenow"
            wherenow=${wherenow%/*}
        done
        apush enter_stack "/"
    fi

    # Pop off common elements
    while [[ -n "$(alast enter_stack)" ]] && [[ "$(alast enter_stack)" == "$(alast leave_stack)" ]]; do

        # Special cases for /, otherwise it would never be possible to run enter/leave for it
        if [[ "$(alen enter_stack)" == "1" ]] && [[ "$(afirst enter_stack)" == "/" ]]; then
            apop leave_stack >/dev/null
            break
        elif [[ "$(alen leave_stack)" == "1" ]] && [[ "$(afirst leave_stack)" == "/" ]]; then
            apop enter_stack >/dev/null
            break
        fi

        apop enter_stack >/dev/null
        apop leave_stack >/dev/null
    done

    # Run leave_stack in lowest to highest
    local stack_size=$(alen leave_stack)
    : ${stack_size:=0}
    local smartcd_runmode=leave
    while (( $stack_size >= 1 )); do
        # ashift in a sub-shell doesn't work
        local smartcd_current_dir="$(afirst leave_stack)"
        ashift leave_stack >/dev/null

        # Set this just in case we are not able to actualy chdir to $smartcd_current_dir
        local varstash_dir="$smartcd_current_dir"

        if [[ -d "$smartcd_current_dir" ]]; then
            builtin cd "$smartcd_current_dir"
        else
            echo "smartcd: leaving non-existent directory $smartcd_current_dir"
            local nodir=1
        fi

        # Empty descend callbacks before unstashing, because if nothing was stashed,
        # it will not empty
        smartcd_ondescend_callbacks=()
        unstash smartcd_ondescend_callbacks

        # We will run system scripts and ~/.smartcd scripts even if we were not
        # able to chdir there, but the user is notified that this occurred so they
        # can check things out

        # 1) Run any system-wide scripts
        local sysdir=$(_smartcd_sysdir)
        if [[ -f "$sysdir$smartcd_current_dir/bash_leave" ]]; then
            if (( ${SMARTCD_QUIET:-0} == 0 )); then
                echo "smartcd: running $sysdir$smartcd_current_dir/bash_leave"
            fi
            _smartcd_exec_file "$sysdir$smartcd_current_dir/bash_leave" "$smartcd_current_dir"
        fi

        # 2) Run ~/.smartcd scripts
        if [[ -f "$base$smartcd_current_dir/bash_leave" ]]; then
            smartcd_upgrade_database
        fi
        local confdir="$base/scripts$smartcd_current_dir"
        if [[ -f "$confdir/bash_leave" ]]; then
            if (( ${SMARTCD_QUIET:-0} == 0 )); then
                echo "smartcd: running $confdir/bash_leave"
            fi
            _smartcd_check_inode "$smartcd_current_dir"
            if [[ -z $_inode_skip ]]; then
                _smartcd_exec_file "$confdir/bash_leave" "$smartcd_current_dir"
            fi
            unset -v _inode_skip
        fi

        # 3) Detect .bash_leave and either notify or run
        if [[ -z "$nodir" && -f .bash_leave ]]; then
            if [[ -n $SMARTCD_LEGACY ]]; then
                if (( ${SMARTCD_QUIET:-0} == 0 )); then
                    echo "smartcd: running $smartcd_current_dir/.bash_leave"
                fi
                _smartcd_exec_file .bash_leave "$smartcd_current_dir"
            elif [[ -n $SMARTCD_AUTOMIGRATE ]]; then
                echo "Automatically migrating \"$smartcd_current_dir/.bash_leave\" to \"$confdir/bash_leave\""
                command mkdir -p "$confdir"
                command cat "$smartcd_current_dir/.bash_leave" >> "$confdir/bash_leave"
                command rm "$smartcd_current_dir/.bash_leave"
            elif (( ${SMARTCD_QUIET:-0} == 0 )); then
                echo "############################################################################"
                echo "# NOTICE!  Deprecated .bash_leave found, please migrate this file to the new"
                echo "# format using the following (or similar) commands:"
                if [[ ! -d $confdir ]]; then
                    echo "mkdir -p \"$confdir\""
                fi
                echo "cat \"$smartcd_current_dir/.bash_leave\" >> \"$confdir/bash_leave\""
                echo "rm \"$smartcd_current_dir/.bash_leave\""
                echo "#"
                echo "# If you would like smartcd to perform this migration for you whenever"
                echo "# possible, set SMARTCD_AUTOMIGRATE=1"
                echo "#"
                echo "# If you wish to accept the risks of the old style of operation and run"
                echo "# them as-is, you may set SMARTCD_LEGACY=1 instead."
                echo "############################################################################"
            fi
        fi

        # 4) Leave hook(s)
        local hook_array=$(_mangle_var smartcd_onleave_callbacks)
        while (( $(alen $hook_array) >= 1 )); do
            ashift $hook_array >/dev/null
            eval "$_ashift_return"
        done

        # 5) Autounstash
        if [[ -n "$(fn_exists autounstash)" ]]; then
            autounstash
        fi

        stack_size=$(alen leave_stack)
        : ${stack_size:=0}
    done
    unset -v varstash_dir

    # Run enter_stack in highest to lowest
    local stack_size=$(alen enter_stack)
    : ${stack_size:=0}
    local smartcd_runmode=enter
    local descend_copy
    descend_copy=()
    while (( $stack_size >= 1 )); do
        # apop in a sub-shell doesn't work
        local smartcd_current_dir="$(alast enter_stack)"
        apop enter_stack >/dev/null
        builtin cd "$smartcd_current_dir"

        # Work from a copy of these hooks, and immediately stash and empty
        # the parent's data, so that any hooks or scripts are free to push
        # into it
        acopy smartcd_ondescend_callbacks descend_copy
        autostash smartcd_ondescend_callbacks
        smartcd_ondescend_callbacks=()

        while (( $(alen descend_copy) > 0 )); do
            ashift descend_copy >/dev/null
            local cmd="$_ashift_return"

            # Token substitution is useful here, but doing so on the self-calls
            # breaks it, so special case that.  I wonder if there are other
            # uses for this which would be better off un-expanded...
            #
            # This is still problematic when smartcd on-descend -r is placed into
            # an enter script since that script will be expanded when run.  One
            # hack to avoid that is to break the literal but preserve the semantics
            # like this:
            #
            #   smartcd on-descend -r 'echo recursive descent into _''_PATH__'
            if [[ ! $cmd =~ ^'smartcd on-descend -r' ]]; then
                cmd="${cmd//__PATH__/$smartcd_current_dir}"
            fi
            eval "$cmd"
        done

        # 1) Run any system-wide scripts
        local sysdir=$(_smartcd_sysdir)
        if [[ -f "$sysdir$smartcd_current_dir/bash_enter" ]]; then
            if (( ${SMARTCD_QUIET:-0} == 0 )); then
                echo "smartcd: running $sysdir$smartcd_current_dir/bash_enter"
            fi
            _smartcd_exec_file "$sysdir$smartcd_current_dir/bash_enter" "$smartcd_current_dir"
        fi

        # 2) Run ~/.smartcd scripts
        if [[ -f "$base$smartcd_current_dir/bash_leave" ]]; then
            smartcd_upgrade_database
        fi
        local confdir="$base/scripts$smartcd_current_dir"
        if [[ -f "$confdir/bash_enter" ]]; then
            if (( ${SMARTCD_QUIET:-0} == 0 )); then
                echo "smartcd: running $confdir/bash_enter"
            fi
            _smartcd_check_inode "$smartcd_current_dir"
            if [[ -z $_inode_skip ]]; then
                _smartcd_exec_file "$confdir/bash_enter" "$smartcd_current_dir"
            fi
            unset -v _inode_skip
        fi

        # 3) Detect .bash_enter and either notify or run
        if [[ -f .bash_enter ]]; then
            if [[ -n $SMARTCD_LEGACY ]]; then
                if (( ${SMARTCD_QUIET:-0} == 0 )); then
                    echo "smartcd: running $smartcd_current_dir/.bash_enter"
                fi
                _smartcd_exec_file .bash_enter "$smartcd_current_dir"
            elif [[ -n $SMARTCD_AUTOMIGRATE ]]; then
                echo "Automatically migrating \"$smartcd_current_dir/.bash_enter\" to \"$confdir/bash_enter\""
                command mkdir -p "$confdir"
                command cat "$smartcd_current_dir/.bash_enter" >> "$confdir/bash_enter"
                command rm "$smartcd_current_dir/.bash_enter"
            elif (( ${SMARTCD_QUIET:-0} == 0 )); then
                echo "############################################################################"
                echo "# NOTICE!  Deprecated .bash_enter found, please migrate this file to the new"
                echo "# format using the following (or similar) commands:"
                if [[ ! -d $confdir ]]; then
                    echo "mkdir -p \"$confdir\""
                fi
                echo "cat \"$smartcd_current_dir/.bash_enter\" >> \"$confdir/bash_enter\""
                echo "rm \"$smartcd_current_dir/.bash_enter\""
                echo "#"
                echo "# If you would like smartcd to perform this migration for you whenever"
                echo "# possible, set SMARTCD_AUTOMIGRATE=1"
                echo "#"
                echo "# If you wish to accept the risks of the old style of operation and run"
                echo "# them as-is, you may set SMARTCD_LEGACY=1 instead."
                echo "############################################################################"
            fi
        fi

        stack_size=$(alen enter_stack)
        : ${stack_size:=0}
    done

    # First go to starting directory, as long as it still exists...
    if [[ -d "$wherestarted" ]]; then
        builtin cd "$wherestarted"
    fi

    # ...restoring any chpwd hooks in the process, and allow them to fire once (now)...
    if [[ -n $stashed_chpwd ]]; then
        # However, if smartcd was called from a hook and we're still here, then that
        # means that the chdir happened _before_ we started and thus the hook already
        # fired.  So go there before re-adding the hooks.
        if [[ -n $smartcd_skip_action ]]; then
            builtin cd "$whereto"
            local arrived_at_destination=1
        fi
        unstash chpwd
        unstash chpwd_functions
    fi

    # ... and then jump to final directory to stay
    if [[ -z $arrived_at_destination ]]; then
        builtin cd "$whereto"
    fi
}

function _smartcd_hook() {
    local cwd="$(pwd)"

    # Skip this if we already ran smartcd for this directory
    if [[ "x$cwd" != "$_smartcd_last_run_for" ]]; then
        local smartcd_skip_action=1
        smartcd cd "$cwd"
    fi
}

function _smartcd_prompt_hook() {
    _smartcd_hook "$@"

    local i=0
    while (( $i < $(alen smartcd_onprompt_callbacks) )); do
        eval "${smartcd_onprompt_callbacks[i]}"
        i=$((i + 1))
    done

    eval $_smartcd_original_prompt_command
}

function setup_smartcd_function() {
    local cmd=$1;
    if typeset -f rvm >/dev/null 2>/dev/null &&
      typeset -f __rvm_setup_cd_function >/dev/null 2>/dev/null
    then
        __rvm_setup_cd_function smartcd $cmd
    else
        eval "function $cmd() { smartcd $cmd \"\$@\"; }"
    fi
}

function setup_smartcd_prompt_hook() {
    if [[ -n $ZSH_VERSION ]]; then
        if [[ -z "$(fn_exists apush)" ]]; then
            echo "array library is not loaded, please ensure that it is installed before using smartcd"
            return
        fi
        _smartcd_original_prompt_command=:
        apush precmd_functions _smartcd_prompt_hook
    else
        if [[ -n $PROMPT_COMMAND && -z $_smartcd_original_prompt_command ]]; then
            _smartcd_original_prompt_command=$PROMPT_COMMAND
        else
            _smartcd_original_prompt_command=:
        fi

        PROMPT_COMMAND=_smartcd_prompt_hook
    fi
}

function setup_smartcd_chpwd_hook() {
    if [[ -n $ZSH_VERSION ]]; then
        if [[ -z "$(fn_exists apush)" ]]; then
            echo "array library is not loaded, please ensure that it is installed before using smartcd"
            return
        fi
        apush chpwd_functions _smartcd_hook
    fi
}

function setup_smartcd_exit_hook() {
    if [[ -n $_smartcd_exit_trap_setup ]]; then
        return
    fi

    if [[ -n $ZSH_VERSION ]]; then
        apush zshexit_functions _smartcd_exit_trap
    else
        _smartcd_original_exit_trap=$(trap -p EXIT)
        _smartcd_original_exit_trap=${_smartcd_original_exit_trap#trap -- }
        _smartcd_original_exit_trap=${_smartcd_original_exit_trap% EXIT}
        trap _smartcd_exit_trap EXIT
    fi

    _smartcd_exit_trap_setup=1
}

function _smartcd_exit_trap() {
    local smartcd_exiting=1

    if [[ -z $SMARTCD_NOEXIT ]]; then
        smartcd cd /
    fi

    if [[ -n $_smartcd_original_exit_trap ]]; then
        eval $_smartcd_original_exit_trap
    fi
}

function bash_enter() {
    _smartcd_file_check bash_enter "$@"
}

function bash_leave() {
    _smartcd_file_check bash_leave "$@"
}

function fn_exists() {
    if [[ -n "$(declare -f $1)" ]]; then
        echo 1
    fi
}

function _smartcd_file() {
    if [[ -n $ZSH_VERSION ]]; then
        # We need the third element because within anth or afirst, arrays is the
        # first two due to the function call and the eval
        local this_file="$(anth funcsourcetrace 3)"
        this_file="${this_file%:*}"
    else
        local this_file="$BASH_SOURCE"
    fi
    if [[ "${this_file%/.smartcd/lib/core/smartcd}" == $HOME ]]; then
        this_file=${this_file/#$HOME/\~}
    fi
    echo "$this_file"
}

# Autoload stubs
function _smartcd_file_check() {
    _smartcd_load "smartcd_edit" && _smartcd_file_check "$@"
}

function smartcd_edit() {
    _smartcd_load "smartcd_edit" && smartcd_edit "$@"
}

function smartcd_config() {
    _smartcd_load "smartcd_config" && smartcd_config "$@"
}

function smartcd_template() {
    _smartcd_load "smartcd_template" && smartcd_template "$@"
}

function smartcd_export() {
    _smartcd_load "smartcd_export" && smartcd_export "$@"
}

function smartcd_import() {
    _smartcd_load "smartcd_export" && smartcd_import "$@"
}

function smartcd_upgrade_database() {
    _smartcd_load "smartcd_upgrade_database" && smartcd_upgrade_database "$@"
}

function smartcd_helper() {
    _smartcd_load "smartcd_helper" && smartcd_helper "$@"
}

# Run on load if all the necessary libraries are loaded, otherwise let them do it
if [[ -n "$(fn_exists apush)" && -n "$(fn_exists autostash)" && -z "$SMARTCD_NOINITIAL" ]]; then
    smartcd_skip_action=1
    smartcd_run_mainline=1
    smartcd cd
    unset smartcd_skip_action
else
    smartcd_initially_deferred=1
fi

# vim: filetype=sh autoindent expandtab shiftwidth=4 softtabstop=4
